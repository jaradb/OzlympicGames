package games;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;

import persons.Athlete;
import persons.Official;

public abstract class Game {

	// The max and min participants, as a constant.
	static final public int MAX_PARTICIPANTS = 8;
	static final public int MIN_PARTICIPANTS = 4;

	private String uniqueGameID;
	private ArrayList<Athlete> competitors;
	private Official referee;
	private String gameDate;

	private Athlete firstPlaceWinner, secondPlaceWinner, thirdPlaceWinner;

	// A multi-line string reported what happened in this game.
	private String gameResult;

	// Number of times the game was run.
	private int roundNumber = 0;

	public Game(String uniqueGameID) {
		this.uniqueGameID = uniqueGameID;
		competitors = new ArrayList<Athlete>();
		gameDate = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
	}

	public int getRoundNumber() {
		return roundNumber;
	}

	public ArrayList<Athlete> getCompetitors() {
		return competitors;
	}

	public void setCompetitors(ArrayList<Athlete> competitors) {
		this.competitors = competitors;
	}

	public void clearCompetitorList() {
		competitors.clear();
	}

	public String getUniqueGameID() {
		return uniqueGameID;
	}

	public void setUniqueGameID(String uniqueGameID) {
		this.uniqueGameID = uniqueGameID;
	}

	public String getGameResult() {
		return gameResult;
	}

	public String getGameDate() {
		return gameDate;
	}

	abstract public String getGameName();

	abstract public Class<?> getAltheteClassTypeForGame();

	public void runGame() {
		// Increment the number of times this game was run.
		roundNumber++;

		// Create a list to store all the competitors times, which will be
		// generated by compete()
		ArrayList<Float> competitorsTimes = new ArrayList<Float>();

		for (Athlete athlete : getCompetitors()) {
			float time = athlete.compete();
			athlete.setLastTimeRecorded(time);
			competitorsTimes.add(time);
		}

		//Sort the competitors by their times recorded, making an ordered list from best to worst times.
		getCompetitors().sort(new Comparator<Athlete>() {

			@Override
			public int compare(Athlete athlete1, Athlete athlete2) {

				if (athlete1.getLastTimeRecorded() > athlete2.getLastTimeRecorded())
					return 1;
				if (athlete1.getLastTimeRecorded() < athlete2.getLastTimeRecorded())
					return -1;

				return 0;
			}
		});

		//Now that we have an ordered list, the first three in the list are the players who recieve points.
		firstPlaceWinner = getCompetitors().get(0);
		secondPlaceWinner = getCompetitors().get(1);
		thirdPlaceWinner = getCompetitors().get(2);


		// The referee returns the game result and assigns the three first
		// places with appropriate points
		gameResult = referee.confirmGameResults(getGameName(), roundNumber, firstPlaceWinner, secondPlaceWinner,
				thirdPlaceWinner, this);

	}

	public Athlete getWinner() {
		return firstPlaceWinner;
	}

	public Athlete getSecondPlace() {
		return secondPlaceWinner;
	}

	public Athlete getThirdPlace() {
		return thirdPlaceWinner;
	}

	public Official getReferee() {
		return referee;
	}

	public void setReferee(Official referee) {
		this.referee = referee;
	}

}
